// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/13/2023 00:58:23"
                                                                                
// Verilog Test Bench template for design : ALU
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] ALUop;
reg [31:0] a;
reg [31:0] b;
reg clk;
// wires                                               
wire [31:0]  result;
wire zero;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.ALUop(ALUop),
	.a(a),
	.b(b),
	.clk(clk),
	.result(result),
	.zero(zero)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin  
	  clk = 0;
	  ALUop = 4'b0001;
	  a = 32'd3467;
	  b = 32'd95897;
	  #20 a = 32'd34;
	  #30 b = 32'd97;
	  #60 a = 32'd111467;
	  #80 b = 32'd12323467;
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
      #5 clk = ~clk;                                                 
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

